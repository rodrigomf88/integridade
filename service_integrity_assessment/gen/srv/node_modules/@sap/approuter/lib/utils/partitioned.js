
'use strict';

module.exports = (middleware) => (req, res, next) => {
  try {
    const partitionedConfig = req.routerConfig && req.routerConfig.cookies && req.routerConfig.cookies['Partitioned'];
    if (partitionedConfig) {
      const re = /;\s*Partitioned\s*(;|$)/i;
      const partitioned = ' Partitioned';
      const userAgent = req.headers['user-agent'] || '';
      const _setHeader = res.setHeader;
      const sessionCookieName = req.app && req.app.get('cookieName');
      const jSessionIdCookies = req.headers.cookie && req.headers.cookie.split(';').filter(n => n.includes(sessionCookieName)) || [];
      if (userAgent.match(partitionedConfig.supportedPartitionAgents) && !userAgent.match(partitionedConfig.unsupportedPartitionAgents)) {
        res.setHeader = function (key, val) {
          const expiredCookies = [];
          if (key && key.toLowerCase() === 'set-cookie' && Array.isArray(val)) {
            // Set existing JSESSIONID cookies in the request to expire when there is more than one.
            if (jSessionIdCookies.length > 1) {
              jSessionIdCookies.forEach(cookie => {
                const [name, value] = cookie.split('=');
                expiredCookies.push(`${name.trim()}=${value.trim()};Path=/;Max-Age=0;Secure;SameSite=None;`);
              });
            }
            val = val.map(v => (expiredCookies.includes(v)) ? v : (v.match(re) ? v : v + (v.endsWith(';') ? partitioned : ';' + partitioned)));
            val = Array.from(new Set(val.concat(expiredCookies)));
          }
          return _setHeader.call(res, key, val);
        };
      }
    }
    return middleware(req, res, next);
  } catch (err){
    next(err);
  }
};
